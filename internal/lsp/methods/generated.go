// Code generated by "generate"; DO NOT EDIT.
package methods

import (
	"github.com/isaacphi/mcp-language-server/internal/lsp"
	"github.com/kralicky/tools-lite/gopls/pkg/protocol"
)

// Wrapper provides type-safe methods for LSP operations
type Wrapper struct {
	client *lsp.Client
}

// NewWrapper creates a new LSP method wrapper
func NewWrapper(client *lsp.Client) *Wrapper {
	return &Wrapper{client: client}
}

// Initialize sends a General request for initialize
func (w *Wrapper) Initialize(params protocol.InitializeParams) (protocol.InitializeResult, error) {
	var result protocol.InitializeResult

	err := w.client.Call("initialize", params, &result)

	return result, err
}

// Initialized sends a General notification for initialized
func (w *Wrapper) Initialized(params protocol.InitializedParams) error {

	return w.client.Notify("initialized", params)

}

// Shutdown sends a General request for shutdown
func (w *Wrapper) Shutdown() error {

	return w.client.Call("shutdown", struct{}{}, nil)

}

// Exit sends a General notification for exit
func (w *Wrapper) Exit() error {

	return w.client.Notify("exit", struct{}{})

}
